# -*- coding: utf-8 -*-
"""
Created on Wed May 23 19:40:46 2018

@author: Raissa
"""

import keyWordsExtraction as kwe
import get_academic_sources as service
import extractContent as ec


def get_results(abstract = "", language = "english" ):
    dict_sources = [service.findScieloReferences, service.findGoogleScholarReferences]
    language = "english"
    abstract = "" 
    quantity = 5
    n_pages = 1
    if abstract == "" :
        abstract = """Industry 4.0 can make a factory smart by applying intelligent information processing
                    approaches, communication systems, future-oriented techniques, and more. However, the high complexity,
                    automation, and 
exibility of an intelligent factory bring new challenges to reliability and safety. Industrial
                    big data generated by multisource sensors, intercommunication within the system and external-related
                    information, and so on, might provide newsolutions for predictive maintenance to improve system reliability.
                    This paper puts forth attributes of industrial big data processing and actively explores industrial big data
                    processing-based predictive maintenance. A novel framework is proposed for structuring multisource heterogeneous
                    information, characterizing structured data with consideration of the spatiotemporal property, and
                    modeling invisible factors, which would make the production process transparent and eventually implement
                    predictive maintenance on facilities and energy saving in the industry 4.0 era. The effectiveness of the
                    proposed scheme was veri
ed by analyzing multisource heterogeneous industrial data for the remaining
                    life prediction of key components of machining equipment."""
    keyWordsSource = kwe.GetRelevanteKeyWords(abstract, quantity, language)
    searchKeyWords = " ".join(keyWordsSource.get('keywords', None))
    
    extractedReferences = [] 
#    extractedReferences.append([a.get("references", []) if a.get("connection", None) == 'success' else None for a in service.findLinkSpringerReferences(searchKeyWords, round(n_pages/5))])
#    all_1 = ec.get_content(extractedReferences['references'], extractedReferences['source'] )
    result = service.findGoogleScholarReferences(searchKeyWords, round(n_pages), language = language)
    extractedReferences.append(result.get('references') if result.get('connection')== 'success' else None)
    
    import get_academic_sources as service
    result = service.findScieloReferences(searchKeyWords, round(n_pages), language = language)
    extractedReferences.append(result.get('references') if result.get('connection')== 'success' else None)
    
    
    
    
    
    #VERIFICAR QUAIS BATERAM MAIS E RETORNAR NA ORDEM
    
    
                    
    return extractedReferences
#[{"title": title, "url": 'https://link-springer-com.ez27.periodicos.capes.gov.br' + url, "author": author,
#             "description": description}] 
#    
    